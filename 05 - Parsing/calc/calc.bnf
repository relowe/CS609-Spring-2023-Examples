To eliminate left recursion:

A -> A a1 B | A a2 B | A an B | B
-replace with-

A -> A'B
A' -> a1 B A' | a2 B A' | ... an B A' | B A' | ""

Parser Grammar
==============
< Program >     ::= < Program > < Statement > 
                    | < Statement >

< Statement >   ::= < Expression > NEWLINE

< Expression >  ::= < Expression' > < Term >

< Expression' > ::= PLUS < Term > < Expression' >
                    | MINUS < Term > < Expression' >
                    | < Term > < Expression' >
                    | ""

< Term >        ::= | < Term > TIMES < Factor >
                    | < Term > DIVIDE < Factor >
                    | < Factor >

< Factor >      ::= | < Exp > POW < Factor >
                    | < Exp >

< Exp >         ::= | LPAREN  < Expression > RPAREN
                    | MINUS < Exp > 
                    | < Number >

< Number >      ::= INTLIT
                    | FLOATLIT




Lexer Grammar
=============
Token       Pattern
-------     -------
NEWLINE     \n
PLUS        +
MINUS       -
TIMES       *
DIVIDE      /
POW         ^
LPAREN      (
RPAREN      )
INTLIT      [0-9]+ (a string of digits)
FLOATLIT    INTLIT . INTLIT
COMMENT      # to the end of the line 
  - Note: We will not make a comment token. Lexer skips the comments


